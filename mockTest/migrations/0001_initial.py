# Generated by Django 5.0.6 on 2024-06-13 14:59

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('questions', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.CharField(max_length=4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128)),
                ('duration', models.DurationField()),
                ('instructions', models.CharField(default='1. The Test consists of Three Sections:- Physics, Chemistry, Mathematics.\n\n2. Total number of Questions:- 54 (Each section consists of 18 questions).\n\n3 .Each Section consists of Three Sub-Section :- Section A , Section B , Section C\n\n4. Marking Scheme -\nFor Section A\nInteger Type Questions (Single Digit Integer) (8 Questions)\nFor each Question, enter the correct single digit integer value.\nPositive Marks : +3 , Negative Marks : 00\n\nFor Section B\nOne or More than one correct (6 Questions)\nFor each Question, choose the option(s) corresponding to (all) the correct answers.\nPositive Marks : +4 , Negative Marks : -1\n\nFor Section C\nSingle Correct (4 Questions)\nFor each Question, choose the correct option corresponding to the correct Answer.\nEach Question has Four options (1),(2),(3),(4). Only ONE of these options is the correct answer.\nPositive Marks : +4 , Negative Marks : -1\n\n5. Test Duration:- 180 mins.\n\n6. Test Timing:- 14:00 PM.', max_length=1024, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='LiveTest',
            fields=[
                ('test_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mockTest.test')),
                ('start_time', models.DateTimeField()),
            ],
            bases=('mockTest.test',),
        ),
        migrations.CreateModel(
            name='TestAttempt',
            fields=[
                ('id', models.CharField(max_length=10, primary_key=True, serialize=False)),
                ('start_time', models.DateTimeField(auto_now_add=True)),
                ('submission_time', models.DateTimeField(null=True)),
                ('score', models.IntegerField(default=0, null=True)),
                ('correct', models.IntegerField(null=True)),
                ('incorrect', models.IntegerField(null=True)),
                ('skipped', models.IntegerField(null=True)),
                ('test_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_attempts', to='mockTest.test')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_tests', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TestQuestion',
            fields=[
                ('id', models.CharField(max_length=8, primary_key=True, serialize=False)),
                ('positive_marks', models.IntegerField(default=4)),
                ('negative_marks', models.IntegerField(default=1)),
                ('question_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='questions.question')),
                ('test_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mockTest.test')),
            ],
        ),
        migrations.CreateModel(
            name='TestQuestionAttempt',
            fields=[
                ('id', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('Unattempted', 'Unattempted'), ('Skipped', 'Skipped'), ('Attempted', 'Attempted')], max_length=64, null=True)),
                ('time_taken', models.BooleanField(default=False, null=True)),
                ('test_attempt_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mockTest.testattempt')),
                ('test_question_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='questions.question')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
